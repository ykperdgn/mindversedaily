#!/usr/bin/env python3
"""
Groq API ile otomatik i√ßerik √ºretimi ve deployment
Server ortamƒ±nda kullanƒ±lmak √ºzere tasarlandƒ±
"""

import os
import sys
import time
import random
import subprocess
import schedule
from datetime import datetime
from content_bot import create_articles_for_selected_categories, auto_deploy

class GroqAutoDeployment:
    def __init__(self):
        self.categories = ["health", "psychology", "history", "space", "quotes", "love"]
        self.rate_limit_delay = 15  # 15 saniye API rate limit korumasƒ±

    def create_content_with_delay(self, categories_count=None):
        """Rate limit korumasƒ± ile i√ßerik olu≈ütur"""
        if categories_count is None:
            categories_count = random.randint(2, 4)  # 2-4 kategori arasƒ±

        selected_categories = random.sample(self.categories, categories_count)

        print(f"üéØ Selected categories for today: {selected_categories}")
        print(f"‚è±Ô∏è Estimated time: {len(selected_categories) * self.rate_limit_delay * 2} seconds")

        for i, category in enumerate(selected_categories):
            if i > 0:
                print(f"‚è≥ Rate limit delay: {self.rate_limit_delay} seconds...")
                time.sleep(self.rate_limit_delay)

            print(f"\nüìù Creating content for category: {category} ({i+1}/{len(selected_categories)})")

            try:
                # Bu kategori i√ßin hem ƒ∞ngilizce hem T√ºrk√ße makale olu≈ütur
                create_articles_for_selected_categories([category], auto_deploy_enabled=False)
                print(f"‚úÖ Content created successfully for: {category}")

            except Exception as e:
                print(f"‚ùå Error creating content for {category}: {e}")
                continue

        print(f"\nüéâ Content creation completed for {len(selected_categories)} categories!")
        return len(selected_categories) > 0

    def deploy_changes(self):
        """Deƒüi≈üiklikleri deploy et"""
        print("\nüöÄ Starting deployment process...")

        try:
            # auto_deploy fonksiyonunu kullan
            success = auto_deploy()

            if success:
                print("‚úÖ Deployment completed successfully!")
                return True
            else:
                print("‚ùå Deployment failed!")
                return False

        except Exception as e:
            print(f"‚ùå Deployment error: {e}")
            return False

    def full_automation(self, categories_count=None):
        """Tam otomatik s√ºre√ß: ƒ∞√ßerik olu≈ütur + Deploy et"""
        print("=" * 60)
        print(f"ü§ñ GROQ AUTO-DEPLOYMENT STARTED - {datetime.now()}")
        print("=" * 60)

        # 1. ƒ∞√ßerik olu≈ütur
        content_success = self.create_content_with_delay(categories_count)

        if not content_success:
            print("‚ùå No content was created, skipping deployment")
            return False

        # 2. Kƒ±sa bekleme
        print("\n‚è≥ Waiting 30 seconds before deployment...")
        time.sleep(30)

        # 3. Deploy et
        deploy_success = self.deploy_changes()

        print("=" * 60)
        print(f"{'‚úÖ SUCCESS' if deploy_success else '‚ùå FAILED'} - GROQ AUTO-DEPLOYMENT COMPLETED - {datetime.now()}")
        print("=" * 60)

        return deploy_success

    def start_scheduler(self):
        """G√ºnl√ºk scheduler ba≈ülat"""
        print("üìÖ Starting Groq content automation scheduler...")
        print("‚è∞ Schedule: Every day at 09:00 AM")
        print("üéØ Will create 2-4 categories of content daily")
        print("üöÄ Automatic deployment to Vercel")
        print("-" * 50)

        # Her g√ºn saat 09:00'da √ßalƒ±≈ütƒ±r
        schedule.every().day.at("09:00").do(self.full_automation)

        # Test i√ßin: Her 2 saatte bir (geli≈ütirme a≈üamasƒ±nda)
        # schedule.every(2).hours.do(lambda: self.full_automation(2))

        print("‚úÖ Scheduler started! Waiting for scheduled time...")

        while True:
            schedule.run_pending()
            time.sleep(60)  # Her dakika kontrol et

def main():
    groq_automation = GroqAutoDeployment()

    if len(sys.argv) > 1:
        mode = sys.argv[1]

        if mode == "run-once":
            # Tek seferlik tam otomatik √ßalƒ±≈ütƒ±r
            categories_count = int(sys.argv[2]) if len(sys.argv) > 2 else None
            groq_automation.full_automation(categories_count)

        elif mode == "content-only":
            # Sadece i√ßerik olu≈ütur
            categories_count = int(sys.argv[2]) if len(sys.argv) > 2 else None
            groq_automation.create_content_with_delay(categories_count)

        elif mode == "deploy-only":
            # Sadece deploy et
            groq_automation.deploy_changes()

        elif mode == "schedule":
            # Scheduler'ƒ± ba≈ülat
            groq_automation.start_scheduler()

        elif mode.startswith("category:"):
            # Belirli kategoriler i√ßin
            categories = mode.split(":")[1].split(",")
            categories = [c.strip() for c in categories if c.strip() in groq_automation.categories]
            if categories:
                print(f"üéØ Creating content for specific categories: {categories}")
                for i, category in enumerate(categories):
                    if i > 0:
                        time.sleep(15)
                    create_articles_for_selected_categories([category], auto_deploy_enabled=False)
                groq_automation.deploy_changes()
            else:
                print("‚ùå Invalid categories specified")
        else:
            print("‚ùå Invalid mode specified")
            print_usage()
    else:
        print_usage()

def print_usage():
    print("""
ü§ñ Groq Auto-Deployment Usage:

python groq_auto_deploy.py [MODE] [OPTIONS]

MODES:
  run-once [count]     - Run full automation once (optionally specify category count)
  content-only [count] - Only create content (optionally specify category count)
  deploy-only          - Only deploy existing changes
  schedule             - Start daily scheduler (runs at 09:00 AM)
  category:cat1,cat2   - Create content for specific categories

EXAMPLES:
  python groq_auto_deploy.py run-once 3
  python groq_auto_deploy.py content-only
  python groq_auto_deploy.py category:health,space
  python groq_auto_deploy.py schedule

CATEGORIES: health, psychology, history, space, quotes, love
""")

if __name__ == "__main__":
    main()
