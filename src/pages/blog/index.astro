---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { Image } from 'astro:assets';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Mevcut i√ßeriklerden kategorileri otomatik √ßek
const availableCategories = [...new Set(posts.map(post => post.data.category).filter(Boolean))];

const categories = availableCategories.length > 0
  ? availableCategories.sort()
  : ["health", "psychology", "history", "space", "quotes", "love"];

const categoryIcons = {
  health: "üß¨",
  psychology: "üß†",
  history: "üìú",
  space: "üöÄ",
  quotes: "üí¨",
  love: "‚ù§Ô∏è"
};

const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get('q')?.toLowerCase() || '';
const categoryQuery = url.searchParams.get('category')?.toLowerCase() || '';

let filteredPosts = posts;

// Debug i√ßin kategori ve post sayƒ±sƒ±nƒ± konsola yazdƒ±r
console.log('Available categories:', availableCategories);
console.log('Total posts:', posts.length);
console.log('Category query:', categoryQuery);
console.log('Filtered posts before:', filteredPosts.length);

// Filter by category first
if (categoryQuery) {
  filteredPosts = filteredPosts.filter(post => {
    const postCategory = post.data.category?.toLowerCase();
    console.log(`Comparing: "${postCategory}" === "${categoryQuery}"`);
    return postCategory === categoryQuery;
  });
  console.log('Filtered posts after category filter:', filteredPosts.length);
  console.log('Posts in category:', filteredPosts.map(p => ({ title: p.data.title, category: p.data.category })));
}

// Then filter by search query if exists
if (searchQuery) {
  filteredPosts = filteredPosts.filter(post =>
    post.data.title.toLowerCase().includes(searchQuery) ||
    post.data.description.toLowerCase().includes(searchQuery) ||
    (post.body && post.body.toLowerCase().includes(searchQuery))
  );
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			.mv-categories {
				display: flex;
				justify-content: center;
				gap: 0.5rem;
				margin-bottom: 2.2rem;
			}
			.mv-category-tab {
				background: #f1f5f9;
				color: #2563eb;
				border-radius: 1.2rem;
				padding: 0.5rem 1.2rem;
				font-weight: 600;
				font-size: 1rem;
				border: 1.5px solid #e0e7ef;
				transition: background 0.2s, color 0.2s;
				text-transform: capitalize;
			}
			.mv-category-tab:hover {
				background: #2563eb;
				color: #fff;
				}
			.mv-category-tab.active {
				background: #2563eb;
				color: #fff;
			}
			.category-icon {
				margin-right: 0.5rem;
			}
			.mv-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
				gap: 1.3rem;
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.mv-card {
				background: #fff;
				border-radius: 1.1rem;
				box-shadow: 0 2px 8px 0 rgba(37,99,235,0.07);
				border: 1px solid #e5e7eb;
				padding: 1.1rem 1rem 1.1rem 1rem;
				transition: box-shadow 0.2s;
				display: flex;
				flex-direction: column;
				min-height: 260px;
			}
			.mv-card:hover {
				box-shadow: 0 4px 16px 0 rgba(37,99,235,0.13);
			}
			.mv-card-img {
				width: 100%;
				height: 120px;
				object-fit: cover;
				border-radius: 0.7rem;
				margin-bottom: 0.7rem;
			}
			.mv-card-title {
				font-size: 1.05rem;
				font-weight: 700;
				color: #1e293b;
				margin-bottom: 0.3rem;
				line-height: 1.3;
			}
			.mv-card-summary {
				font-size: 0.97rem;
				color: #475569;
				margin-bottom: 0.7rem;
				line-clamp: 2;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}
			.mv-card-meta {
				font-size: 0.85rem;
				color: #64748b;
				margin-top: auto;
			}
		</style>
		<script>
			// Client-side category filtering
			function filterByCategory(category) {
				const url = new URL(window.location);
				if (category === 'all') {
					url.searchParams.delete('category');
				} else {
					url.searchParams.set('category', category);
				}
				window.location.href = url.toString();
			}

			// Add click handlers to category tabs
			document.addEventListener('DOMContentLoaded', () => {
				const categoryTabs = document.querySelectorAll('.mv-category-tab');
				categoryTabs.forEach(tab => {
					tab.addEventListener('click', (e) => {
						e.preventDefault();
						const href = tab.getAttribute('href');
						const url = new URL(href, window.location.origin);
						const category = url.searchParams.get('category') || 'all';
						filterByCategory(category);
					});
				});
			});
		</script>
	</head>
	<body>
		<Header />
		<nav class="mv-categories">
			<a href="/blog" class={`mv-category-tab ${!categoryQuery ? 'active' : ''}`} data-astro-reload>
				All Posts
			</a>
			{categories.map(cat => (
				<a
					href={`/blog?category=${cat}`}
					class={`mv-category-tab ${categoryQuery === cat.toLowerCase() ? 'active' : ''}`}
					data-astro-reload
				>
					<span class="category-icon">{categoryIcons[cat]}</span>
					{cat.charAt(0).toUpperCase() + cat.slice(1)}
				</a>
			))}
		</nav>
		<main>
			{filteredPosts.length === 0 && (
				<div class="no-posts" style="text-align: center; padding: 2rem; color: #64748b;">
					<p>Bu kategoride hen√ºz i√ßerik bulunmuyor.</p>
					<a href="/blog" style="color: #2563eb; text-decoration: underline;">T√ºm yazƒ±lara d√∂n</a>
				</div>
			)}
			<ul class="mv-grid">
				{filteredPosts.map(post => (
					<li class="mv-card">
						<a href={post.id ? `/blog/${post.id}` : '#'}>
							{post.data.image
								? <img src={post.data.image} alt={post.data.title} class="mv-card-img" loading="lazy" onError={(e) => { e.target.src = '/assets/blog-placeholder-1.jpg'; }} />
								: <img src="/assets/blog-placeholder-1.jpg" alt="placeholder" class="mv-card-img" loading="lazy" />
							}
							<div class="mv-card-title">{post.data.title}</div>
							<div class="mv-card-summary">{post.data.description || post.body.slice(0, 120) + '...'}</div>
							<div class="mv-card-meta">{post.data.category || 'Genel'} ‚Ä¢ <FormattedDate date={post.data.pubDate} /></div>
						</a>
					</li>
				))}
			</ul>
		</main>
		<Footer />
	</body>
</html>
