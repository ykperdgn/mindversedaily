---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION, SITE_LANG } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const categories = [...new Set(posts.map(post => post.data.category).filter(Boolean))];

  return categories.map(category => ({
    params: { category },
    props: { category }
  }));
}

const { category } = Astro.params;
const allPosts = await getCollection('blog');

// Kategori sayfasında dil algılama
const isEnglishCategory = Astro.url.pathname.includes('/en/');
const posts = allPosts
  .filter(post => {
    if (!post.slug) return false; // slug kontrolü ekle
    if (isEnglishCategory) {
      return post.slug.endsWith('.en'); // Sadece İngilizce
    } else {
      return post.slug.endsWith('.tr') || (!post.slug.endsWith('.en') && !post.slug.endsWith('.tr')); // Türkçe + varsayılan
    }
  })
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Filter posts by category
const filteredPosts = posts.filter(post =>
  post.data.category?.toLowerCase() === category.toLowerCase()
);

// Get all available categories for navigation
const availableCategories = [...new Set(posts.map(post => post.data.category).filter(Boolean))];
const categories = availableCategories.length > 0
  ? availableCategories.sort()
  : ["health", "psychology", "history", "space", "quotes", "love"];

const categoryIcons = {
  health: "🧬",
  psychology: "🧠",
  history: "📜",
  space: "🚀",
  quotes: "💬",
  love: "❤️"
};

const categoryTitles = {
  health: "Sağlık",
  psychology: "Psikoloji",
  history: "Tarih",
  space: "Uzay",
  quotes: "Alıntılar",
  love: "Aşk"
};

const categoryDescriptions = {
  health: "Sağlık, tıp, wellness, beslenme ve mental sağlık konularında güncel yazılar ve araştırmalar",
  psychology: "Psikoloji, davranış bilimleri, zihin sağlığı ve kişisel gelişim konularında derinlemesine analizler",
  history: "Tarih, kültür, medeniyet ve geçmişin günümüze yansımaları üzerine kapsamlı yazılar",
  space: "Uzay, astronomi, keşifler ve evrenin gizemleri hakkında bilimsel içerikler",
  quotes: "İlham verici alıntılar, hikmetli sözler ve yaşam felsefesi üzerine düşünceler",
  love: "Aşk, ilişkiler, duygular ve insan bağları üzerine psikolojik yaklaşımlar"
};

const categoryKeywords = {
  health: "sağlık, tıp, wellness, mental sağlık, beslenme, egzersiz, yaşam tarzı",
  psychology: "psikoloji, davranış, zihin, kişilik, terapi, bilişsel gelişim",
  history: "tarih, geçmiş, medeniyet, kültür, arkeoloji, antik dönem",
  space: "uzay, astronomi, gezegen, galaksi, keşif, NASA, evren",
  quotes: "alıntılar, söz, hikmet, felsefe, motivasyon, ilham",
  love: "aşk, ilişki, duygular, romantizm, sevgi, bağ, psikoloji"
};
---

<!doctype html>
<html lang={SITE_LANG}>
	<head>
		<BaseHead
			title={`${categoryTitles[category] || category.charAt(0).toUpperCase() + category.slice(1)} Yazıları - ${SITE_TITLE.split(' - ')[0]}`}
			description={categoryDescriptions[category] || `${categoryTitles[category] || category} kategorisindeki en son yazılar ve haberler`}
			keywords={categoryKeywords[category]}
			articleType="website"
		/>
		<style>
			body {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				min-height: 100vh;
				margin: 0;
				font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
			}

			.content-wrapper {
				background: rgba(255, 255, 255, 0.95);
				min-height: 100vh;
				backdrop-filter: blur(10px);
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 2rem 1rem;
			}

			.page-header {
				text-align: center;
				margin-bottom: 3rem;
				padding: 2rem 0;
				background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
				border-radius: 1.5rem;
				box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
			}

			.page-title {
				font-size: 2.5rem;
				font-weight: 700;
				color: #1e293b;
				margin-bottom: 0.5rem;
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 0.75rem;
			}

			.category-emoji {
				font-size: 3rem;
			}

			.page-subtitle {
				font-size: 1.1rem;
				color: #64748b;
				margin-bottom: 2rem;
			}

			.breadcrumb {
				font-size: 0.9rem;
				color: #64748b;
				margin-bottom: 1.5rem;
			}

			.breadcrumb a {
				color: #2563eb;
				text-decoration: none;
			}

			.breadcrumb a:hover {
				text-decoration: underline;
			}

			.mv-categories {
				display: flex;
				justify-content: center;
				gap: 0.75rem;
				margin-bottom: 3rem;
				flex-wrap: wrap;
			}

			.mv-category-tab {
				background: rgba(255, 255, 255, 0.9);
				color: #475569;
				border-radius: 2rem;
				padding: 0.75rem 1.5rem;
				font-weight: 600;
				font-size: 0.95rem;
				border: 2px solid rgba(226, 232, 240, 0.8);
				transition: all 0.3s ease;
				text-transform: capitalize;
				text-decoration: none;
				backdrop-filter: blur(10px);
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
			}

			.mv-category-tab:hover {
				background: #2563eb;
				color: #fff;
				border-color: #2563eb;
				transform: translateY(-2px);
				box-shadow: 0 4px 20px rgba(37, 99, 235, 0.2);
			}

			.mv-category-tab.active {
				background: #2563eb;
				color: #fff;
				border-color: #2563eb;
				box-shadow: 0 4px 20px rgba(37, 99, 235, 0.3);
			}

			.category-icon {
				margin-right: 0.5rem;
			}

			.mv-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
				gap: 2rem;
				list-style: none;
				padding: 0;
				margin: 0;
			}

			.mv-card {
				background: rgba(255, 255, 255, 0.95);
				border-radius: 1.5rem;
				box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
				border: 1px solid rgba(226, 232, 240, 0.5);
				overflow: hidden;
				transition: all 0.3s ease;
				backdrop-filter: blur(10px);
				position: relative;
			}

			.mv-card:hover {
				transform: translateY(-8px);
				box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
			}

			.mv-card::before {
				content: '';
				position: absolute;
				top: 0;
				left: -100%;
				width: 100%;
				height: 100%;
				background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.6), transparent);
				transition: left 0.5s;
				pointer-events: none;
			}

			.mv-card:hover::before {
				left: 100%;
			}

			.mv-card a {
				text-decoration: none;
				color: inherit;
				display: block;
			}

			.mv-card-img {
				width: 100%;
				height: 200px;
				object-fit: cover;
			}

			.mv-card-content {
				padding: 1.5rem;
			}

			.mv-card-title {
				font-size: 1.25rem;
				font-weight: 700;
				color: #1e293b;
				margin-bottom: 0.75rem;
				line-height: 1.4;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}

			.mv-card-summary {
				font-size: 1rem;
				color: #64748b;
				margin-bottom: 1rem;
				line-height: 1.6;
				display: -webkit-box;
				-webkit-line-clamp: 3;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}

			.mv-card-meta {
				font-size: 0.9rem;
				color: #94a3b8;
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.no-posts {
				text-align: center;
				padding: 4rem 2rem;
				background: rgba(255, 255, 255, 0.9);
				border-radius: 1.5rem;
				box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
			}

			.no-posts h3 {
				font-size: 1.5rem;
				color: #475569;
				margin-bottom: 1rem;
			}

			.no-posts p {
				color: #64748b;
				margin-bottom: 1.5rem;
			}

			.no-posts a {
				color: #2563eb;
				text-decoration: none;
				font-weight: 600;
				padding: 0.75rem 1.5rem;
				border: 2px solid #2563eb;
				border-radius: 2rem;
				transition: all 0.3s ease;
			}

			.no-posts a:hover {
				background: #2563eb;
				color: white;
			}

			@media (max-width: 768px) {
				.page-title {
					font-size: 2rem;
				}

				.mv-grid {
					grid-template-columns: 1fr;
					gap: 1.5rem;
				}

				.mv-categories {
					gap: 0.5rem;
				}

				.mv-category-tab {
					padding: 0.5rem 1rem;
					font-size: 0.9rem;
				}
			}
		</style>
	</head>
	<body>
		<div class="content-wrapper">
			<Header />

			<div class="container">
				<div class="breadcrumb">
					<a href="/">Ana Sayfa</a> > <a href="/blog">Blog</a> > {categoryTitles[category] || category.charAt(0).toUpperCase() + category.slice(1)}
				</div>

				<div class="page-header">
					<h1 class="page-title">
						<span class="category-emoji">{categoryIcons[category] || "📝"}</span>
						{categoryTitles[category] || category.charAt(0).toUpperCase() + category.slice(1)}
					</h1>
					<p class="page-subtitle">
						Bu kategoride {filteredPosts.length} yazı bulunuyor
					</p>
				</div>

				<nav class="mv-categories">
					<a href="/blog" class="mv-category-tab">
						Tüm Yazılar
					</a>
					{categories.map(cat => (
						<a
							href={`/blog/${cat}`}
							class={`mv-category-tab ${category === cat.toLowerCase() ? 'active' : ''}`}
						>
							<span class="category-icon">{categoryIcons[cat]}</span>
							{categoryTitles[cat] || cat.charAt(0).toUpperCase() + cat.slice(1)}
						</a>
					))}
				</nav>

				<main>
					{filteredPosts.length === 0 ? (
						<div class="no-posts">
							<h3>Henüz içerik yok</h3>
							<p>Bu kategoride henüz yazı bulunmuyor.</p>
							<a href="/blog">Tüm yazılara dön</a>
						</div>
					) : (						<ul class="mv-grid">
							{filteredPosts.map(post => (
								<li class="mv-card">
									<a href={post.id ? `/blog/${post.id}` : '#'}>										{post.data.image ? (
											<img
												src={post.data.image}
												alt={post.data.title}
												class="mv-card-img"
												loading="lazy"
												onError={(e) => { e.target.src = '/assets/blog-placeholder-1.svg'; }}
											/>
										) : (
											<img
												src="/assets/blog-placeholder-1.svg"
												alt="placeholder"
												class="mv-card-img"
												loading="lazy"
											/>
										)}
										<div class="mv-card-content">
											<div class="mv-card-title">{post.data.title}</div>
											<div class="mv-card-summary">
												{post.data.description || post.body?.slice(0, 150) + '...'}
											</div>
											<div class="mv-card-meta">
												<FormattedDate date={post.data.pubDate} />
											</div>
										</div>
									</a>
								</li>
							))}
						</ul>
					)}
				</main>
			</div>

			<Footer />		</div>
	</body>
</html>
