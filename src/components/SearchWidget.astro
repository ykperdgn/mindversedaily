---
export interface Props {
  lang?: 'tr' | 'en';
  placeholder?: string;
  buttonText?: string;
}

const {
  lang = 'tr',
  placeholder = lang === 'tr' ? 'Makalelerde ara...' : 'Search articles...',
  buttonText = lang === 'tr' ? 'Ara' : 'Search'
} = Astro.props;
---

<div class="search-widget">
  <div class="search-container">
    <div class="search-icon">üîç</div>
    <input
      type="text"
      id="search-input"
      class="search-input"
      placeholder={placeholder}
      autocomplete="off"
    />
    <button type="button" id="search-btn" class="search-btn">
      {buttonText}
    </button>
  </div>

  <div id="search-results" class="search-results" style="display: none;">
    <div class="results-header">
      <span id="results-count"></span>
      <button type="button" id="clear-search" class="clear-btn">‚úï</button>
    </div>
    <div id="results-list" class="results-list"></div>
  </div>
</div>

<style>
  .search-widget {
    margin: 2rem 0;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .search-container {
    position: relative;
    display: flex;
    align-items: center;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 2rem;
    border: 2px solid rgba(59, 130, 246, 0.2);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .search-container:focus-within {
    border-color: #3b82f6;
    box-shadow: 0 8px 30px rgba(59, 130, 246, 0.2);
    transform: translateY(-2px);
  }

  .search-icon {
    padding: 1rem 1.25rem;
    font-size: 1.2rem;
    color: #64748b;
    background: transparent;
  }

  .search-input {
    flex: 1;
    padding: 1rem 0;
    border: none;
    outline: none;
    font-size: 1rem;
    color: #1e293b;
    background: transparent;
    font-family: inherit;
  }

  .search-input::placeholder {
    color: #94a3b8;
  }

  .search-btn {
    padding: 1rem 1.5rem;
    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
    color: white;
    border: none;
    cursor: pointer;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    border-radius: 0;
  }

  .search-btn:hover {
    background: linear-gradient(135deg, #2563eb 0%, #7c3aed 100%);
    transform: scale(1.02);
  }

  .search-results {
    margin-top: 1rem;
    background: rgba(255, 255, 255, 0.98);
    border-radius: 1.5rem;
    border: 2px solid rgba(226, 232, 240, 0.8);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    max-height: 500px;
    overflow: hidden;
    backdrop-filter: blur(10px);
  }

  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid rgba(226, 232, 240, 0.5);
    background: rgba(248, 250, 252, 0.8);
  }

  .clear-btn {
    background: none;
    border: none;
    font-size: 1.2rem;
    color: #64748b;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .clear-btn:hover {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .results-list {
    max-height: 400px;
    overflow-y: auto;
    padding: 0;
  }

  .result-item {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid rgba(226, 232, 240, 0.3);
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .result-item:hover {
    background: rgba(59, 130, 246, 0.05);
    transform: translateX(5px);
  }

  .result-title {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    line-height: 1.4;
  }

  .result-description {
    color: #64748b;
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 0.5rem;
  }

  .result-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.8rem;
    color: #94a3b8;
  }

  .result-category {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    color: #1e40af;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-weight: 600;
    text-transform: capitalize;
  }

  .no-results {
    padding: 2rem;
    text-align: center;
    color: #64748b;
  }

  .no-results-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .search-widget {
      margin: 1.5rem 0;
    }

    .search-container {
      border-radius: 1.5rem;
    }

    .search-icon {
      padding: 0.8rem 1rem;
      font-size: 1.1rem;
    }

    .search-input {
      padding: 0.8rem 0;
      font-size: 0.95rem;
    }

    .search-btn {
      padding: 0.8rem 1.2rem;
      font-size: 0.9rem;
    }

    .result-item {
      padding: 1rem;
    }

    .result-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .search-widget {
      margin: 1rem -1rem;
      padding: 0 1rem;
    }

    .results-header {
      padding: 0.8rem 1rem;
    }

    .result-item {
      padding: 0.8rem 1rem;
    }
  }
</style>

<script define:vars={{ lang }}>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');
    const searchResults = document.getElementById('search-results');
    const resultsCount = document.getElementById('results-count');
    const resultsList = document.getElementById('results-list');
    const clearBtn = document.getElementById('clear-search');

    let allPosts = [];
    let searchTimeout;

    // Fetch all posts when component loads
    async function loadPosts() {
      try {
        const response = await fetch(`/api/posts.json?lang=${lang}`);
        if (response.ok) {
          allPosts = await response.json();
        }
      } catch (error) {
        console.error('Error loading posts:', error);
        // Fallback: scrape posts from the current page
        fallbackLoadPosts();
      }
    }    // Fallback method to get posts from current page
    function fallbackLoadPosts() {
      const postCards = document.querySelectorAll('[data-post-title]');
      allPosts = Array.from(postCards).map(card => {
        return {
          title: card.getAttribute('data-post-title') || '',
          description: card.getAttribute('data-post-description') || '',
          category: card.getAttribute('data-post-category') || '',
          date: card.getAttribute('data-post-date') || '',
          url: card.href || '#'
        };
      }).filter(post => post.title);
    }

    // Search function
    function performSearch(query) {
      if (!query.trim()) {
        hideResults();
        return;
      }

      const searchTerm = query.toLowerCase().trim();
      const results = allPosts.filter(post => {
        return post.title.toLowerCase().includes(searchTerm) ||
               post.description.toLowerCase().includes(searchTerm) ||
               post.category.toLowerCase().includes(searchTerm);
      });

      displayResults(results, query);
    }

    // Display search results
    function displayResults(results, query) {
      const count = results.length;
      const countText = lang === 'tr'
        ? `${count} sonu√ß bulundu`
        : `${count} result${count !== 1 ? 's' : ''} found`;

      resultsCount.textContent = countText;

      if (results.length === 0) {
        const noResultsText = lang === 'tr'
          ? 'Aramanƒ±zla e≈üle≈üen makale bulunamadƒ±'
          : 'No articles found matching your search';

        resultsList.innerHTML = `
          <div class="no-results">
            <div class="no-results-icon">üìù</div>
            <p>${noResultsText}</p>
          </div>
        `;
      } else {
        resultsList.innerHTML = results.map(post => `
          <a href="${post.url}" class="result-item">
            <div class="result-title">${highlightText(post.title, query)}</div>
            <div class="result-description">${highlightText(post.description, query)}</div>
            <div class="result-meta">
              <span class="result-category">${post.category}</span>
            </div>
          </a>
        `).join('');
      }

      searchResults.style.display = 'block';
    }

    // Highlight search terms in text
    function highlightText(text, query) {
      if (!query.trim()) return text;

      const regex = new RegExp(`(${query.trim()})`, 'gi');
      return text.replace(regex, '<mark style="background: #fef3c7; padding: 1px 2px; border-radius: 2px;">$1</mark>');
    }

    // Hide search results
    function hideResults() {
      searchResults.style.display = 'none';
    }

    // Event listeners
    searchInput.addEventListener('input', function() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch(this.value);
      }, 300); // Debounce search
    });

    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        performSearch(this.value);
      }
    });

    searchBtn.addEventListener('click', function() {
      performSearch(searchInput.value);
    });

    clearBtn.addEventListener('click', function() {
      searchInput.value = '';
      hideResults();
      searchInput.focus();
    });

    // Hide results when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.search-widget')) {
        hideResults();
      }
    });

    // Load posts on component initialization
    loadPosts();
  });
</script>
